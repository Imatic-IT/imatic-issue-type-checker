!function(e){var t={};function n(u){if(t[u])return t[u].exports;var o=t[u]={i:u,l:!1,exports:{}};return e[u].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,u){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:u})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var u=Object.create(null);if(n.r(u),Object.defineProperty(u,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(u,o,function(t){return e[t]}.bind(null,o));return u},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){window.onload=function(){let e=function(){const e=document.querySelector("#imaticIssueType");if(null!=e)return JSON.parse(e.dataset.data)}();e.issue_view_state=parseInt(e.issue_view_state);const t=document.querySelector("#bugnoteadd").querySelector('input[type="submit"]'),n=document.querySelector("#add_public_bugnote"),u=document.querySelector("#bugnote_add_view_status"),o=document.querySelector("#bugnote_text"),i=document.getElementById("loader"),r=document.getElementById("confirm_bugnote");function s(){i.style.display="block"}function c(t=!1,n=null){const u=document.getElementById("close_bugnote_congirm_modal"),o=document.getElementById("public_issue_send_bugnote"),c=document.getElementById("send_bugnote");if(u.addEventListener("click",(function(){r.classList.remove("show"),r.classList.add("fade")})),t&&o&&function(t){e.allow_set_public_issue.allow||t.remove();e.allow_set_public_issue.change_status_access||t.remove();10==e.issue_view_state&&t.remove()}(o),t)return;r.classList.add("show"),r.classList.remove("fade");document.getElementById("bugnote_modal_confirm_message").textContent=n,o&&o.addEventListener("click",(function(t){t.target.value;$.ajax({url:e.set_issue_public_url,type:"POST",dataType:"json",success:function(e){e.affected_row&&(i.style.display="none",a())},error:function(e,t,n){console.error(n)}}),s()})),c.addEventListener("click",(function(e){a(),s()}))}function a(){t.dispatchEvent(new MouseEvent("click"))}c(!0),n.addEventListener("click",(function(t){switch(u.checked=!1,o.classList.remove("bugnote-private"),e.issue_view_state){case 50:t.preventDefault(),c(!1,e.warning_private_issue_public_bugnote.message);break;default:s()}})),t.addEventListener("click",(function(t){switch(e.issue_view_state){case 10:u.checked&&e.warning_public_issue_private_bugnote.allow?(t.preventDefault(),c(!1,e.warning_public_issue_private_bugnote.message)):s();break;case 50:u.checked?s():e.warning_private_issue_public_bugnote.allow?(t.preventDefault(),c(!1,e.warning_private_issue_public_bugnote.message)):s();break;default:s()}})),t.insertAdjacentElement("afterend",n)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,